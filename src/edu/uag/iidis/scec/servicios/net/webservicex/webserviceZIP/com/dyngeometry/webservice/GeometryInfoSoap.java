
package com.dyngeometry.webservice;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "GeometryInfoSoap", targetNamespace = "http://www.DynGeometry.com/WebService/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface GeometryInfoSoap {


    /**
     * <table style='font-family:Verdana;color:#4D85C5;'><tr><td>Zip query based on 5 digit zip code. It returns the result as a object instance of ZipInfo which contains the geometry info to construct the polygon on Google Map.</td></tr></table>
     * 
     * @param zip5
     * @param key
     * @return
     *     returns com.dyngeometry.webservice.ZipInfo
     */
    @WebMethod(operationName = "GetZip", action = "http://www.DynGeometry.com/WebService/GetZip")
    @WebResult(name = "GetZipResult", targetNamespace = "http://www.DynGeometry.com/WebService/")
    @RequestWrapper(localName = "GetZip", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetZip")
    @ResponseWrapper(localName = "GetZipResponse", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetZipResponse")
    public ZipInfo getZip(
        @WebParam(name = "key", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String key,
        @WebParam(name = "zip5", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String zip5);

    /**
     * <table style='font-family:Verdana;color:#4D85C5;'><tr><td>Zip neighbors query based on 5 digit zip code and buffer miles. It returns the result as a object instance of ZipBufferInfo which contains the list of neighbors within user defined buffer miles.</td></tr></table>
     * 
     * @param bufferMile
     * @param zip5
     * @param key
     * @return
     *     returns com.dyngeometry.webservice.ZipBufferInfo
     */
    @WebMethod(operationName = "GetZipBuffer", action = "http://www.DynGeometry.com/WebService/GetZipBuffer")
    @WebResult(name = "GetZipBufferResult", targetNamespace = "http://www.DynGeometry.com/WebService/")
    @RequestWrapper(localName = "GetZipBuffer", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetZipBuffer")
    @ResponseWrapper(localName = "GetZipBufferResponse", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetZipBufferResponse")
    public ZipBufferInfo getZipBuffer(
        @WebParam(name = "key", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String key,
        @WebParam(name = "zip5", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String zip5,
        @WebParam(name = "bufferMile", targetNamespace = "http://www.DynGeometry.com/WebService/")
        double bufferMile);

    /**
     * <table style='font-family:Verdana;color:#4D85C5;'><tr><td>Zip neighbor Cities query based on Zip5 and buffer miles. It returns the result as a object instance of ZipNeighborCityInfo which contains the list of neighbor cities within user defined buffer miles of zip5.</td></tr></table>
     * 
     * @param bufferMile
     * @param zip5
     * @param key
     * @return
     *     returns com.dyngeometry.webservice.ZipNeighborCityInfo
     */
    @WebMethod(operationName = "GetZipNeighborCity", action = "http://www.DynGeometry.com/WebService/GetZipNeighborCity")
    @WebResult(name = "GetZipNeighborCityResult", targetNamespace = "http://www.DynGeometry.com/WebService/")
    @RequestWrapper(localName = "GetZipNeighborCity", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetZipNeighborCity")
    @ResponseWrapper(localName = "GetZipNeighborCityResponse", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetZipNeighborCityResponse")
    public ZipNeighborCityInfo getZipNeighborCity(
        @WebParam(name = "key", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String key,
        @WebParam(name = "zip5", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String zip5,
        @WebParam(name = "bufferMile", targetNamespace = "http://www.DynGeometry.com/WebService/")
        double bufferMile);

    /**
     * <table style='font-family:Verdana;color:#4D85C5;'><tr><td>County query based on county fips or county_name + state_name. If fips is provided, it will search county based on fips. Otherwise, county_name + state_name will be used. Please use state abbr as state_name, such as TX. It returns the result as a object instance of CountyInfo which contains the geometry info to construct the polygon on Google Map.</td></tr></table>
     * 
     * @param stateAbbr
     * @param fips
     * @param key
     * @param countyName
     * @return
     *     returns com.dyngeometry.webservice.CountyInfo
     */
    @WebMethod(operationName = "GetCounty", action = "http://www.DynGeometry.com/WebService/GetCounty")
    @WebResult(name = "GetCountyResult", targetNamespace = "http://www.DynGeometry.com/WebService/")
    @RequestWrapper(localName = "GetCounty", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetCounty")
    @ResponseWrapper(localName = "GetCountyResponse", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetCountyResponse")
    public CountyInfo getCounty(
        @WebParam(name = "key", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String key,
        @WebParam(name = "countyName", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String countyName,
        @WebParam(name = "stateAbbr", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String stateAbbr,
        @WebParam(name = "fips", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String fips);

    /**
     * <table style='font-family:Verdana;color:#4D85C5;'><tr><td>City query based on city fips or City_name + state_name. If fips is provided, it will search city based on fips. Otherwise, City_name + state_name will be used. Please use state abbr as state_name, such as TX. It returns the result as a object instance of CityInfo which contains the geometry info to construct the polygon on Google Map.</td></tr></table>
     * 
     * @param stateAbbr
     * @param cityName
     * @param fips
     * @param key
     * @return
     *     returns com.dyngeometry.webservice.CityInfo
     */
    @WebMethod(operationName = "GetCity", action = "http://www.DynGeometry.com/WebService/GetCity")
    @WebResult(name = "GetCityResult", targetNamespace = "http://www.DynGeometry.com/WebService/")
    @RequestWrapper(localName = "GetCity", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetCity")
    @ResponseWrapper(localName = "GetCityResponse", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetCityResponse")
    public CityInfo getCity(
        @WebParam(name = "key", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String key,
        @WebParam(name = "cityName", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String cityName,
        @WebParam(name = "stateAbbr", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String stateAbbr,
        @WebParam(name = "fips", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String fips);

    /**
     * <table style='font-family:Verdana;color:#4D85C5;'><tr><td>City neighbors query based on city name, state and buffer miles. It returns the result as a object instance of CityBufferInfo which contains the list of neighbor cities within user defined buffer miles.</td></tr></table>
     * 
     * @param stateAbbr
     * @param cityName
     * @param bufferMile
     * @param key
     * @return
     *     returns com.dyngeometry.webservice.CityBufferInfo
     */
    @WebMethod(operationName = "GetCityBuffer", action = "http://www.DynGeometry.com/WebService/GetCityBuffer")
    @WebResult(name = "GetCityBufferResult", targetNamespace = "http://www.DynGeometry.com/WebService/")
    @RequestWrapper(localName = "GetCityBuffer", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetCityBuffer")
    @ResponseWrapper(localName = "GetCityBufferResponse", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetCityBufferResponse")
    public CityBufferInfo getCityBuffer(
        @WebParam(name = "key", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String key,
        @WebParam(name = "cityName", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String cityName,
        @WebParam(name = "stateAbbr", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String stateAbbr,
        @WebParam(name = "bufferMile", targetNamespace = "http://www.DynGeometry.com/WebService/")
        double bufferMile);

    /**
     * <table style='font-family:Verdana;color:#4D85C5;'><tr><td>City neighbor Zips query based on city name, state abbr (e.g. TX) and buffer miles. It returns the result as a object instance of ZipBufferInfo which contains the list of neighbors within user defined buffer miles.</td></tr></table>
     * 
     * @param stateAbbr
     * @param cityName
     * @param bufferMile
     * @param key
     * @return
     *     returns com.dyngeometry.webservice.CityNeighborZipInfo
     */
    @WebMethod(operationName = "GetCityNeighborZip", action = "http://www.DynGeometry.com/WebService/GetCityNeighborZip")
    @WebResult(name = "GetCityNeighborZipResult", targetNamespace = "http://www.DynGeometry.com/WebService/")
    @RequestWrapper(localName = "GetCityNeighborZip", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetCityNeighborZip")
    @ResponseWrapper(localName = "GetCityNeighborZipResponse", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetCityNeighborZipResponse")
    public CityNeighborZipInfo getCityNeighborZip(
        @WebParam(name = "key", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String key,
        @WebParam(name = "cityName", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String cityName,
        @WebParam(name = "stateAbbr", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String stateAbbr,
        @WebParam(name = "bufferMile", targetNamespace = "http://www.DynGeometry.com/WebService/")
        double bufferMile);

    /**
     * <table style='font-family:Verdana;color:#4D85C5;'><tr><td>SchoolDistrict query based on schoolDistrict_ID or schoolDistrict_name + state_name. If schoolDistrict_ID is provided, it will search school district based on schoolDistrict_ID. Otherwise, schoolDistrict_name + state_name will be used. Please use state abbr as state_name, such as TX. It returns the result as a object instance of SchoolDistrictInfo which contains the geometry info to construct the polygon on Google Map.</td></tr></table>
     * 
     * @param stateAbbr
     * @param schoolDistrictID
     * @param schoolDistrictName
     * @param key
     * @return
     *     returns com.dyngeometry.webservice.SchoolDistrictInfo
     */
    @WebMethod(operationName = "GetSchoolDistrict", action = "http://www.DynGeometry.com/WebService/GetSchoolDistrict")
    @WebResult(name = "GetSchoolDistrictResult", targetNamespace = "http://www.DynGeometry.com/WebService/")
    @RequestWrapper(localName = "GetSchoolDistrict", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetSchoolDistrict")
    @ResponseWrapper(localName = "GetSchoolDistrictResponse", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetSchoolDistrictResponse")
    public SchoolDistrictInfo getSchoolDistrict(
        @WebParam(name = "key", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String key,
        @WebParam(name = "schoolDistrictName", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String schoolDistrictName,
        @WebParam(name = "stateAbbr", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String stateAbbr,
        @WebParam(name = "schoolDistrictID", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String schoolDistrictID);

    /**
     * <table style='font-family:Verdana;color:#4D85C5;'><tr><td>Census Tract query based on censusTract_ID. It returns the result as a object instance of CensusTractInfo which contains the geometry info to construct the polygon on Google Map.</td></tr></table>
     * 
     * @param censusTractID
     * @param key
     * @return
     *     returns com.dyngeometry.webservice.CensusTractInfo
     */
    @WebMethod(operationName = "GetCensusTract", action = "http://www.DynGeometry.com/WebService/GetCensusTract")
    @WebResult(name = "GetCensusTractResult", targetNamespace = "http://www.DynGeometry.com/WebService/")
    @RequestWrapper(localName = "GetCensusTract", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetCensusTract")
    @ResponseWrapper(localName = "GetCensusTractResponse", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetCensusTractResponse")
    public CensusTractInfo getCensusTract(
        @WebParam(name = "key", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String key,
        @WebParam(name = "censusTractID", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String censusTractID);

    /**
     * <table style='font-family:Verdana;color:#4D85C5;'><tr><td>Get the x, y coordinates based on input adddress. It returns the result as a object instance of Address.</td></tr><tr><td>Sign up to get the key now at <a href='http://www.dyngeometry.com/web/LoginOrRegister.aspx' style="color: #ff0000">www.DynGeometry.com</a></td></tr></table>
     * 
     * @param zip
     * @param city
     * @param street
     * @param state
     * @param key
     * @return
     *     returns com.dyngeometry.webservice.Address
     */
    @WebMethod(operationName = "Geocode", action = "http://www.DynGeometry.com/WebService/Geocode")
    @WebResult(name = "GeocodeResult", targetNamespace = "http://www.DynGeometry.com/WebService/")
    @RequestWrapper(localName = "Geocode", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.Geocode")
    @ResponseWrapper(localName = "GeocodeResponse", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GeocodeResponse")
    public Address geocode(
        @WebParam(name = "key", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String key,
        @WebParam(name = "street", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String street,
        @WebParam(name = "city", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String city,
        @WebParam(name = "state", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String state,
        @WebParam(name = "zip", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String zip);

    /**
     * <table style='font-family:Verdana;color:#4D85C5;'><tr><td>Get the x, y coordinates, city, city fips, state, state fips, zipcode, county, county fips, county subdivision, school district, census tract, census block group, area code, traffic zone, voting district, core based statistical area, combined statistical area and metropolitan division  based on input adddress. It returns the result as a object instance of AddressInfo.</td></tr></table>
     * 
     * @param zip
     * @param city
     * @param street
     * @param state
     * @param key
     * @return
     *     returns com.dyngeometry.webservice.AddressInfo
     */
    @WebMethod(operationName = "GeocodePro", action = "http://www.DynGeometry.com/WebService/GeocodePro")
    @WebResult(name = "GeocodeProResult", targetNamespace = "http://www.DynGeometry.com/WebService/")
    @RequestWrapper(localName = "GeocodePro", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GeocodePro")
    @ResponseWrapper(localName = "GeocodeProResponse", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GeocodeProResponse")
    public AddressInfo geocodePro(
        @WebParam(name = "key", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String key,
        @WebParam(name = "street", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String street,
        @WebParam(name = "city", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String city,
        @WebParam(name = "state", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String state,
        @WebParam(name = "zip", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String zip);

    /**
     * <table style='font-family:Verdana;color:#4D85C5;'><tr><td>Get city, city fips, state, state fips, zipcode, county, county fips, county subdivision, school district, census tract, census block group, area code, traffic zone, voting district, core based statistical area, combined statistical area and metropolitan division based on input x, y coordinates. It returns the result as a object instance of XYInfo. This function is only available for USA coordinates.</td></tr><tr><td>Sign up to get the key now at <a href='http://www.dyngeometry.com/web/LoginOrRegister.aspx' style="color: #ff0000">www.DynGeometry.com</a></td></tr></table>
     * 
     * @param latitude
     * @param key
     * @param longitude
     * @return
     *     returns com.dyngeometry.webservice.XYInfo
     */
    @WebMethod(operationName = "XYQuery", action = "http://www.DynGeometry.com/WebService/XYQuery")
    @WebResult(name = "XYQueryResult", targetNamespace = "http://www.DynGeometry.com/WebService/")
    @RequestWrapper(localName = "XYQuery", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.XYQuery")
    @ResponseWrapper(localName = "XYQueryResponse", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.XYQueryResponse")
    public XYInfo xyQuery(
        @WebParam(name = "key", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String key,
        @WebParam(name = "longitude", targetNamespace = "http://www.DynGeometry.com/WebService/")
        double longitude,
        @WebParam(name = "latitude", targetNamespace = "http://www.DynGeometry.com/WebService/")
        double latitude);

    /**
     * <table style='font-family:Verdana;color:#4D85C5;'><tr><td>IP query based on IP Address. It returns the result as a object instance of IPInfo.</td></tr></table>
     * 
     * @param ip
     * @param key
     * @return
     *     returns com.dyngeometry.webservice.IPInfo
     */
    @WebMethod(operationName = "IPQuery", action = "http://www.DynGeometry.com/WebService/IPQuery")
    @WebResult(name = "IPQueryResult", targetNamespace = "http://www.DynGeometry.com/WebService/")
    @RequestWrapper(localName = "IPQuery", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.IPQuery")
    @ResponseWrapper(localName = "IPQueryResponse", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.IPQueryResponse")
    public IPInfo ipQuery(
        @WebParam(name = "key", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String key,
        @WebParam(name = "IP", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String ip);

    /**
     * <table style='font-family:Verdana;color:#4D85C5;'><tr><td>IP query based on IP Address. It returns the result as a object instance of IPInfoPro which includes city, city fips, state, state fips, zipcode, county, county fips, county subdivision, school district, census tract, census block group, area code, traffic zone, voting district, core based statistical area, combined statistical area and metropolitan division. This function is only available for USA IPs.</td></tr></table>
     * 
     * @param ip
     * @param key
     * @return
     *     returns com.dyngeometry.webservice.IPInfoPro
     */
    @WebMethod(operationName = "IPQueryPro", action = "http://www.DynGeometry.com/WebService/IPQueryPro")
    @WebResult(name = "IPQueryProResult", targetNamespace = "http://www.DynGeometry.com/WebService/")
    @RequestWrapper(localName = "IPQueryPro", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.IPQueryPro")
    @ResponseWrapper(localName = "IPQueryProResponse", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.IPQueryProResponse")
    public IPInfoPro ipQueryPro(
        @WebParam(name = "key", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String key,
        @WebParam(name = "IP", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String ip);

    /**
     * <table style='font-family:Verdana;color:#4D85C5;'><tr><td>Determin if the location is over water or land. It returns the result as a object instance of WaterOrLandInfo.</td></tr></table>
     * 
     * @param latitude
     * @param key
     * @param longitude
     * @return
     *     returns com.dyngeometry.webservice.WaterOrLandInfo
     */
    @WebMethod(operationName = "GetWaterOrLand", action = "http://www.DynGeometry.com/WebService/GetWaterOrLand")
    @WebResult(name = "GetWaterOrLandResult", targetNamespace = "http://www.DynGeometry.com/WebService/")
    @RequestWrapper(localName = "GetWaterOrLand", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetWaterOrLand")
    @ResponseWrapper(localName = "GetWaterOrLandResponse", targetNamespace = "http://www.DynGeometry.com/WebService/", className = "com.dyngeometry.webservice.GetWaterOrLandResponse")
    public WaterOrLandInfo getWaterOrLand(
        @WebParam(name = "key", targetNamespace = "http://www.DynGeometry.com/WebService/")
        String key,
        @WebParam(name = "longitude", targetNamespace = "http://www.DynGeometry.com/WebService/")
        double longitude,
        @WebParam(name = "latitude", targetNamespace = "http://www.DynGeometry.com/WebService/")
        double latitude);

}
